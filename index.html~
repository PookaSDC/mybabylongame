<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	    <head>
		    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	            <title>Babylon Template</title>
	            <style>
       			   html, body {
	                   overflow: hidden;
	                   width: 100%;
	                   height: 100%;
	                   margin: 0;
	                   padding: 0;
	                }
	                #renderCanvas {
		                width: 100%;
		                height: 100%;
		                touch-action: none;
	            }
		       </style>
	        <script src="https://cdn.babylonjs.com/babylon.js"></script>
	        <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
	        <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
	   </head>
	   <body>
		   <canvas id="renderCanvas" touch-action="none"></canvas> <!-- touch-action="none" for best results from PEP -->
	       <script>
		const canvas = document.getElementById("renderCanvas"); // Get the canvas element
		const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine

		var createScene = function() {
		    var scene = new BABYLON.Scene(engine);
			var chair = null;

			// Chair
			    BABYLON.SceneLoader.ImportMesh(null, "https://models.babylonjs.com/", "Chair/Chair.obj", scene, function (mesh) {
		            chair = mesh;
		            chair.scaling = new BABYLON.Vector3(0.25, 0.25, 0.25);
				const chairMat = new BABYLON.StandardMaterial("chairMat");
				chair.diffuseColor = new BABYLON.Color3.Blue();
				chair.material = chairMat;
			});

			const box = BABYLON.MeshBuilder.CreateBox("box", {})

			const sdcGround = new BABYLON.StandardMaterial("sdcGround");
			sdcGround.diffuseTexture = new BABYLON.Texture("assets/png/y.png", scene);
			const ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 20, height: 20})

			
			ground.material = sdcGround;

			box.position.x = 2;
			box.position.y = 0.5;

			scene.actionManager = new BABYLON.ActionManager(scene);

			scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: 'w'}, function () { box.position.z++; }))
			scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: 'a'}, function () { box.position.x--; }))
			scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: 's'}, function () { box.position.z--; }))
			scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: 'd'}, function () { box.position.x++; }))
			scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: 'e'}, function () { box.position.y--; }))
			scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: 'q'}, function () { box.position.y++; }))

	            const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));
	            camera.attachControl(canvas, true);
	            const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0));
		  return scene;
		};

		const scene = createScene(); //Call the createScene function
		// Register a render loop to repeatedly render the scene
		engine.runRenderLoop(function () {
					scene.render();
				});
		// Watch for browser/canvas resize events
		window.addEventListener("resize", function () {
					engine.resize();
				});
            </script>
       </body>
</html>
